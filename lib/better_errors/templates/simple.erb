<!DOCTYPE html>
<html>
<head>
    <title><%= exception.class %> at <%= request_path %></title>
</head>
<body>

  <style>
    body{
      margin: 0; padding: 0;
    }
    pre{
      position: absolute;
      top: 0;
      left: 0;
      right: 0;
      bottom: 22px;
      border: 0;
      margin: 0;
      overflow: auto;
      width: 100%;
      white-space: pre-wrap;
      padding: 5px;
      box-sizing: border-box;
    }
    input{
      position: fixed;
      bottom: 0; left: 0; right: 0;
      padding: 4px 8px;
      border: 0;
      border-top: 1px solid #ccc;
      box-sizing: border-box;
      width: 100%;
    }
    input:focus {
      outline-width: 0;
    }
  </style>


  <pre></pre>
  <input>

</body>
<script>
(function() {

    var OID = <%== object_id.to_s.inspect %>;

    function apiCall(method, opts, cb) {
        var req = new XMLHttpRequest();
        req.open("POST", <%== uri_prefix.gsub("<", "&lt;").inspect %> + "/__better_errors/" + OID + "/" + method, true);
        req.setRequestHeader("Content-Type", "application/json");
        req.send(JSON.stringify(opts));
        req.onreadystatechange = function() {
            if(req.readyState == 4) {
                var res = JSON.parse(req.responseText);
                cb(res);
            }
        };
    }

    function escapeHTML(html) {
        return html.replace(/&/, "&amp;").replace(/</g, "&lt;");
    }

    function REPL() {
        var previousCommands = JSON.parse(localStorage.getItem("better_errors_previous_commands"));
        if(previousCommands === null) {
          localStorage.setItem("better_errors_previous_commands", JSON.stringify([]));
          previousCommands = [];
        }

        this.previousCommandOffset = previousCommands.length;
    }

    REPL.all = [];

    REPL.prototype.install = function() {
        //this.promptElement  = this.querySelector(".prompt span");
        this.inputElement     = document.querySelector("input");
        this.outputElement    = document.querySelector("pre");
        this.coloringElement  = document.querySelector("code");

        var self = this;
        this.inputElement.onkeydown = function(ev) {
          self.onKeyDown(ev);
        };

        this.setPrompt(">>");

        REPL.all[this.index] = this;
    }

    REPL.prototype.focus = function() {
        this.inputElement.focus();
    };

    REPL.prototype.setPrompt = function(prompt) {
        this._prompt = prompt;
        //this.promptElement.innerHTML = escapeHTML(prompt);
    };

    REPL.prototype.getInput = function() {
        return this.inputElement.value;
    };

    REPL.prototype.setInput = function(text) {
        this.inputElement.value = text;

        if(this.inputElement.setSelectionRange) {
            // set cursor to end of input
            this.inputElement.setSelectionRange(text.length, text.length);
        }
    };

    REPL.prototype.writeRawOutput = function(output) {
        this.outputElement.innerHTML += output;
        this.outputElement.scrollTop = this.outputElement.scrollHeight;
    };

    REPL.prototype.writeOutput = function(output) {
        this.writeRawOutput(escapeHTML(output));
    };

    REPL.prototype.sendInput = function(line) {
        var self = this;
        apiCall("eval", { "index": this.index, source: line }, function(response) {
            if(response.error) {
                self.writeOutput(response.error + "\n");
            }
            self.writeOutput(self._prompt + " ");
            self.writeRawOutput(response.highlighted_input + "\n");
            self.writeOutput(response.result);
            self.setPrompt(response.prompt);
            self.setInput(response.prefilled_input);
        });
    };

    REPL.prototype.onEnterKey = function() {
        var text = this.getInput();
        if(text != "" && text !== undefined) {
            var previousCommands = JSON.parse(localStorage.getItem("better_errors_previous_commands"));
            this.previousCommandOffset = previousCommands.push(text);
            if(previousCommands.length > 100) {
              previousCommands.splice(0, 1);
            }
            localStorage.setItem("better_errors_previous_commands", JSON.stringify(previousCommands));
        }
        this.setInput("");
        this.sendInput(text);
    };

    REPL.prototype.onNavigateHistory = function(direction) {
        this.previousCommandOffset += direction;
        var previousCommands = JSON.parse(localStorage.getItem("better_errors_previous_commands"));

        if(this.previousCommandOffset < 0) {
            this.previousCommandOffset = -1;
            this.setInput("");
            return;
        }

        if(this.previousCommandOffset >= previousCommands.length) {
            this.previousCommandOffset = previousCommands.length;
            this.setInput("");
            return;
        }

        this.setInput(previousCommands[this.previousCommandOffset]);
    };

    REPL.prototype.onKeyDown = function(ev) {
        if(ev.keyCode == 13) {
            this.onEnterKey();
        } else if(ev.keyCode == 38 || (ev.ctrlKey && ev.keyCode == 80)) {
            // the user pressed the up arrow or Ctrl-P
            this.onNavigateHistory(-1);
            ev.preventDefault();
            return false;
        } else if(ev.keyCode == 40 || (ev.ctrlKey && ev.keyCode == 78)) {
            // the user pressed the down arrow or Ctrl-N
            this.onNavigateHistory(1);
            ev.preventDefault();
            return false;
        }
    };

    new REPL().install();
})();
</script>
</html>

<!-- generated by Better Errors in <%= Time.now.to_f - @start_time %> seconds -->
